method = "cv",
number = 5,
savePredictions = "all",
returnResamp = "all"
)
gbm_grid <- expand.grid(
interaction.depth = c(3, 5),
n.trees = c(100, 200),
shrinkage = c(0.05, 0.1),
n.minobsinnode = 10
)
gbm_model_cv <- train(
gbm_formula,
data = data_gbm,
method = "gbm",
trControl = train_control,
tuneGrid = gbm_grid,
verbose = FALSE
)
return(gbm_model_cv)
}
gbm_2024 <- run_gbm_cv(data2024, "2024")
gbm_2025 <- run_gbm_cv(data2025, "2025")
gbm_importance <- varImp(gbm_2024)$importance %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Variable") %>%
arrange(desc(Overall))
ggplot(gbm_importance[1:10, ], aes(x = reorder(Variable, Overall), y = Overall)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Top 10 Variable Importance - GBM (2024)",
x = "Variable",
y = "Importance"
) +
theme_minimal()
gbm_importance2 <- varImp(gbm_2025)$importance %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Variable") %>%
arrange(desc(Overall))
ggplot(gbm_importance2[1:10, ], aes(x = reorder(Variable, Overall), y = Overall)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Top 10 Variable Importance - GBM (2025)",
x = "Variable",
y = "Importance"
) +
theme_minimal()
# Extract RMSEs for Random Forest
best_params <- rf_2024$model$bestTune
rf_rmse_folds <- rf_2024$model$resample %>%
filter(
mtry == best_params$mtry,
splitrule == best_params$splitrule,
min.node.size == best_params$min.node.size
) %>%
mutate(
Fold = paste("Fold", row_number()),
Model = "Random Forest",
RMSE = RMSE
) %>%
select(Fold, Model, RMSE)
# Extract RMSEs for XGBoost
xgb_preds <- xgb_2024$model$pred
best_xgb <- xgb_2024$model$bestTune
xgb_preds_filtered <- xgb_2024$model$pred %>%
filter(
nrounds == best_xgb$nrounds,
max_depth == best_xgb$max_depth,
eta == best_xgb$eta,
gamma == best_xgb$gamma,
min_child_weight == best_xgb$min_child_weight
)
xgb_rmse_folds <- xgb_preds_filtered %>%
group_by(Resample) %>%
summarise(
RMSE = RMSE(obs, pred),
.groups = "drop"
) %>%
mutate(
Fold = Resample,
Model = "XGBoost"
) %>%
select(Fold, Model, RMSE)
# Extract RMSEs for GBMboost
best_gbm <- gbm_2024$bestTune
gbm_preds <- gbm_2024$pred %>%
filter(
interaction.depth == best_gbm$interaction.depth,
n.trees == best_gbm$n.trees,
shrinkage == best_gbm$shrinkage,
n.minobsinnode == best_gbm$n.minobsinnode
)
gbm_rmse_folds <- gbm_preds %>%
group_by(Resample) %>%
summarise(RMSE = RMSE(obs, pred), .groups = "drop") %>%
mutate(
Fold = gsub("Fold", "Fold ", Resample),
Model = "GBM"
) %>%
select(Fold, Model, RMSE)
# Extract RMSEs for OLS (Model 3 only)
ols_rmse_folds <- eval2024$long %>%
filter(Model == "Model3" & Fold != "mean value") %>%
mutate(Model = "OLS")
# Extract RMSEs for LASSO
lasso_rmse_folds <- lasso2024_df %>%
filter(Fold != "mean value") %>%
rename(RMSE = RMSE) %>%
select(Fold, Model, RMSE)
# Combine all models
xgb_rmse_folds <- xgb_rmse_folds %>%
mutate(Fold = gsub("Fold", "Fold ", Fold))
horserace_rmse <- bind_rows(ols_rmse_folds, lasso_rmse_folds, rf_rmse_folds,
xgb_rmse_folds, gbm_rmse_folds)
# Plot: RMSE per fold
ggplot(horserace_rmse, aes(x = Fold, y = as.numeric(RMSE), group = Model, color = Model)) +
geom_line(size = 1) + geom_point(size = 2) +
labs(title = "Horserace: Model Comparison (2024)", y = "RMSE", x = "Fold") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot: RMSE distribution across models
ggplot(horserace_rmse, aes(x = Model, y = as.numeric(RMSE), fill = Model)) +
geom_boxplot() +
labs(title = "RMSE Distribution by Model (2024)", y = "RMSE", x = "Model") +
theme_minimal()
# Extract RMSEs for Random Forest
best_params2 <- rf_2025$model$bestTune
rf_rmse_folds2 <- rf_2025$model$resample %>%
filter(
mtry == best_params2$mtry,
splitrule == best_params2$splitrule,
min.node.size == best_params2$min.node.size
) %>%
mutate(
Fold = paste("Fold", row_number()),
Model = "Random Forest",
RMSE = RMSE
) %>%
select(Fold, Model, RMSE)
# Extract RMSEs for XGBoost
xgb_preds2 <- xgb_2025$model$pred
best_xgb2 <- xgb_2025$model$bestTune
xgb_preds_filtered2 <- xgb_2025$model$pred %>%
filter(
nrounds == best_xgb2$nrounds,
max_depth == best_xgb2$max_depth,
eta == best_xgb2$eta,
gamma == best_xgb2$gamma,
min_child_weight == best_xgb2$min_child_weight
)
xgb_rmse_folds2 <- xgb_preds_filtered2 %>%
group_by(Resample) %>%
summarise(
RMSE = RMSE(obs, pred),
.groups = "drop"
) %>%
mutate(
Fold = Resample,
Model = "XGBoost"
) %>%
select(Fold, Model, RMSE)
xgb_rmse_folds2 <- xgb_rmse_folds2 %>%
mutate(Fold = gsub("Fold", "Fold ", Fold))
# Extract RMSEs for GBMboost
best_gbm2 <- gbm_2025$bestTune
gbm_preds2 <- gbm_2025$pred %>%
filter(
interaction.depth == best_gbm2$interaction.depth,
n.trees == best_gbm2$n.trees,
shrinkage == best_gbm2$shrinkage,
n.minobsinnode == best_gbm2$n.minobsinnode
)
gbm_rmse_folds2 <- gbm_preds2 %>%
group_by(Resample) %>%
summarise(RMSE = RMSE(obs, pred), .groups = "drop") %>%
mutate(
Fold = gsub("Fold", "Fold ", Resample),
Model = "GBM"
) %>%
select(Fold, Model, RMSE)
# Extract RMSEs for OLS (Model 3 only)
ols_rmse_folds2 <- eval2025$long %>%
filter(Model == "Model3" & Fold != "mean value") %>%
mutate(Model = "OLS")
# Extract RMSEs for LASSO
lasso_rmse_folds2 <- lasso2025_df %>%
filter(Fold != "mean value") %>%
rename(RMSE = RMSE) %>%
select(Fold, Model, RMSE)
# Combine all models
horserace_rmse2 <- bind_rows(ols_rmse_folds2, lasso_rmse_folds2, rf_rmse_folds2,
xgb_rmse_folds2, gbm_rmse_folds2)
# Plot: RMSE per fold
ggplot(horserace_rmse2, aes(x = Fold, y = as.numeric(RMSE), group = Model, color = Model)) +
geom_line(size = 1) + geom_point(size = 2) +
labs(title = "Horserace: Model Comparison (2025)", y = "RMSE", x = "Fold") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot: RMSE distribution across models
ggplot(horserace_rmse2, aes(x = Model, y = as.numeric(RMSE), fill = Model)) +
geom_boxplot() +
labs(title = "RMSE Distribution by Model (2025)", y = "RMSE", x = "Model") +
theme_minimal()
library(tidyverse)
library(modelsummary)
library(dplyr)
rm(list=ls())
setwd("C:/Users/Пользователь/Desktop/MA1y/Prediction_with_ML/Machine-Learning/Assignment 2")
data2025 <- read.csv("Prague2025q1_cleaned.csv")
data2024 <- read.csv("Prague2024q4_cleaned.csv")
data <- data2024 %>%
dplyr::group_by(property_type) %>%
dplyr::summarise(n = dplyr::n_distinct(X), .groups = "drop")
table(data$property_type)
data2024 <- data2024 %>%
filter(property_type %in% c("Entire rental unit", "Entire condo",
"Private room in rental unit", "Entire serviced apartment")) %>%
mutate(
property_type = recode(property_type,
"Entire rental unit" = "Rental Unit",
"Entire condo" = "Condo",
"Private room in rental unit" = "Private Room",
"Entire serviced apartment" = "Serviced Apt"),
property_type = factor(property_type))
data2025 <- data2025 %>%
filter(property_type %in% c("Entire rental unit", "Entire condo",
"Private room in rental unit", "Entire serviced apartment")) %>%
mutate(
property_type = recode(property_type,
"Entire rental unit" = "Rental Unit",
"Entire condo" = "Condo",
"Private room in rental unit" = "Private Room",
"Entire serviced apartment" = "Serviced Apt"),
property_type = factor(property_type))
View(data)
library(tidyverse)
library(modelsummary)
library(dplyr)
rm(list=ls())
setwd("C:/Users/Пользователь/Desktop/MA1y/Prediction_with_ML/Machine-Learning/Assignment 2")
data2025 <- read.csv("Prague2025q1_cleaned.csv")
data2024 <- read.csv("Prague2024q4_cleaned.csv")
data <- data2024 %>%
dplyr::group_by(property_type) %>%
dplyr::summarise(n = dplyr::n_distinct(X), .groups = "drop")
table(data$property_type)
data2024 <- data2024 %>%
filter(property_type %in% c("Entire rental unit", "Entire condo",
"Private room in rental unit", "Entire serviced apartment")) %>%
mutate(
property_type = recode(property_type,
"Entire rental unit" = "Rental Unit",
"Entire condo" = "Condo",
"Private room in rental unit" = "Private Room",
"Entire serviced apartment" = "Serviced Apt"),
property_type = factor(property_type))
data2025 <- data2025 %>%
filter(property_type %in% c("Entire rental unit", "Entire condo",
"Private room in rental unit", "Entire serviced apartment")) %>%
mutate(
property_type = recode(property_type,
"Entire rental unit" = "Rental Unit",
"Entire condo" = "Condo",
"Private room in rental unit" = "Private Room",
"Entire serviced apartment" = "Serviced Apt"),
property_type = factor(property_type))
data2024 <- data2024 %>%
mutate(f_room_type = factor(room_type))
data2025 <- data2025 %>%
mutate(f_room_type = factor(room_type))
data2024$f_room_type2 <- factor(ifelse(data2024$f_room_type== "Entire home/apt", "Entire/Apt",
ifelse(data2024$f_room_type== "Private room", "Private", ".")))
data2025$f_room_type2 <- factor(ifelse(data2025$f_room_type== "Entire home/apt", "Entire/Apt",
ifelse(data2025$f_room_type== "Private room", "Private", ".")))
## Create Numerical variables
data2024 <- data2024 %>%
mutate(
Czech_koruna_price_day = price,
p_host_response_rate = ifelse(host_response_rate == "N/A", -1,
as.numeric(gsub("%", "", host_response_rate))),
p_host_acceptance_rate = ifelse(host_acceptance_rate == "N/A", -1,
as.numeric(gsub("%", "", host_acceptance_rate)))
)
numericals <- c("accommodates","bathrooms","review_scores_rating","number_of_reviews",
"reviews_per_month","minimum_nights","beds")
data2024 <- data2024 %>%
mutate_at(vars(numericals), funs("n"=as.numeric))
data2025 <- data2025 %>%
mutate(
Czech_koruna_price_day = price,
p_host_response_rate = ifelse(host_response_rate == "N/A", -1,
as.numeric(gsub("%", "", host_response_rate))),
p_host_acceptance_rate = ifelse(host_acceptance_rate == "N/A", -1,
as.numeric(gsub("%", "", host_acceptance_rate)))
)
numericals <- c("accommodates","bathrooms","review_scores_rating","number_of_reviews",
"reviews_per_month","minimum_nights","beds")
data2025 <- data2025 %>%
mutate_at(vars(numericals), funs("n"=as.numeric))
#create days since first review
data2024 <- data2024 %>%
mutate(
n_days_since = as.numeric(as.Date(calendar_last_scraped,format="%Y-%m-%d") -
as.Date(first_review ,format="%Y-%m-%d")))
data2025 <- data2025 %>%
mutate(
n_days_since = as.numeric(as.Date(calendar_last_scraped,format="%Y-%m-%d") -
as.Date(first_review ,format="%Y-%m-%d")))
data2024 %>%
filter(price < 20000) %>%
ggplot(aes(x = price)) +
geom_histogram(binwidth = 250, fill = "darkgreen", color = "white") +
labs(title = "Distribution of Nightly Prices (Below 10,000 CZK)",
x = "Price (CZK)",
y = "Number of Listings") +
theme_minimal()
data2024 <- data2024 %>%
mutate(ln_price = log(price))
data2024 <- data2024 %>%
filter(price < 9000)
data2025 %>%
filter(price < 50000) %>%
ggplot(aes(x = price)) +
geom_histogram(binwidth = 250, fill = "darkgreen", color = "white") +
labs(title = "Distribution of Nightly Prices (Below 10,000 CZK)",
x = "Price (CZK)",
y = "Number of Listings") +
theme_minimal()
data2025 <- data2025 %>%
mutate(ln_price = log(price))
data2025 <- data2025 %>%
filter(price < 7000)
data2024 <- data2024 %>%
mutate(accommodates2=accommodates^2,
ln_accommodates=log(accommodates) ,
ln_accommodates2=log(accommodates)^2,
ln_beds = log(beds),
ln_number_of_reviews = log(number_of_reviews+1)
)
data2025 <- data2025 %>%
mutate(accommodates2=accommodates^2,
ln_accommodates=log(accommodates) ,
ln_accommodates2=log(accommodates)^2,
ln_beds = log(beds),
ln_number_of_reviews = log(number_of_reviews+1)
)
# Pool accomodations with 0,1,2,10 bathrooms
data2024 <- data2024 %>%
mutate(f_bathroom = cut(bathrooms, c(0,1,2,10), labels=c(0,1,2), right = F) )
# Pool num of reviews to 3 categories: none, 1-51 and >51
data2024$number_of_reviews_n <- as.numeric(data2024$number_of_reviews_n)
data2024 <- data2024 %>%
mutate(f_number_of_reviews = cut(
number_of_reviews_n,
breaks = c(0, 1, 51, max(number_of_reviews_n, na.rm = TRUE)),
labels = c(0, 1, 2),
right = FALSE
))
# Pool and categorize the number of minimum nights: 1,2,3, 3+
data2024$minimum_nights <- as.numeric(data2024$minimum_nights)
data2024 <- data2024 %>%
mutate(f_minimum_nights = cut(
minimum_nights,
breaks = c(0, 2, 3, max(minimum_nights, na.rm = TRUE)),
labels = c(0, 1, 2),
right = FALSE
))
# Change Infinite values with NaNs
for (j in 1:ncol(data2024) ) data.table::set(data2024,
which(is.infinite(data2024[[j]])), j, NA)
data2025 <- data2025 %>%
mutate(f_bathroom = cut(bathrooms, c(0,1,2,10), labels=c(0,1,2), right = F) )
data2025$number_of_reviews_n <- as.numeric(data2025$number_of_reviews_n)
data2025 <- data2025 %>%
mutate(f_number_of_reviews = cut(
number_of_reviews_n,
breaks = c(0, 1, 51, max(number_of_reviews_n, na.rm = TRUE)),
labels = c(0, 1, 2),
right = FALSE
))
data2025$minimum_nights <- as.numeric(data2025$minimum_nights)
data2025 <- data2025 %>%
mutate(f_minimum_nights = cut(
minimum_nights,
breaks = c(0, 2, 3, max(minimum_nights, na.rm = TRUE)),
labels = c(0, 1, 2),
right = FALSE
))
for (j in 1:ncol(data2025) ) data.table::set(data2025,
which(is.infinite(data2025[[j]])), j, NA)
to_filter <- sapply(data2024, function(x) sum(is.na(x)))
to_filter[to_filter > 0]
vars_to_drop <- c(
"host_is_superhost", "neighbourhood_group_cleansed",
"calendar_updated", "number_of_reviews",
"review_scores_rating", "review_scores_accuracy", "review_scores_cleanliness",
"review_scores_checkin", "review_scores_communication", "review_scores_location",
"review_scores_value", "license", "reviews_per_month",
"review_scores_rating_n", "reviews_per_month_n", "n_days_since",
"ln_beds", "f_number_of_reviews"
)
data2024 <- data2024 %>%
select(-all_of(vars_to_drop))
to_filter <- sapply(data2025, function(x) sum(is.na(x)))
to_filter[to_filter > 0]
data2025 <- data2025 %>%
select(-all_of(vars_to_drop))
data2024 <- data2024 %>%
mutate(
bathrooms =  ifelse(is.na(bathrooms), median(bathrooms, na.rm = T), bathrooms),
bedrooms =  ifelse(is.na(bedrooms), median(bedrooms, na.rm = T), bedrooms),
beds_n = ifelse(is.na(beds_n), accommodates, beds_n),
f_bathroom=ifelse(is.na(f_bathroom),1, f_bathroom),
f_minimum_nights=ifelse(is.na(f_minimum_nights),1, f_minimum_nights)
)
data2025 <- data2025 %>%
mutate(
bathrooms =  ifelse(is.na(bathrooms), median(bathrooms, na.rm = T), bathrooms),
bedrooms =  ifelse(is.na(bedrooms), median(bedrooms, na.rm = T), bedrooms),
beds_n = ifelse(is.na(beds_n), accommodates, beds_n),
f_bathroom=ifelse(is.na(f_bathroom),1, f_bathroom),
f_minimum_nights=ifelse(is.na(f_minimum_nights),1, f_minimum_nights)
)
data2024 <- na.omit(data2024)
data2025 <- na.omit(data2025)
skim(data2024)
library(skimr)
skim(data2024)
library(caret)
library(tidyverse)
library(skimr)
library(ggthemes)
library(gridExtra)
library(lattice)
library(glmnet)
library(rpart)
library(rattle)
library(rpart.plot)
library(xtable)
library(Hmisc)
library(modelsummary)
#-----------------------------------------------------------------------------------------
rm(list=ls())
setwd("C:/Users/Пользователь/Desktop/MA1y/Prediction_with_ML/Machine-Learning/Assignment 2")
data2025 <- read.csv("Prague2025q1.csv")
data2024 <- read.csv("Prague2024q4.csv")
drops <- c("host_thumbnail_url","host_picture_url","listing_url","picture_url","host_url","last_scraped","description", "neighborhood_overview", "host_about", "host_response_time", "name", "host_location")
data2024<-data2024[ , !(names(data2024) %in% drops)]
data2025<-data2025[ , !(names(data2025) %in% drops)]
#drop broken lines - where id is not a character of numbers
data2024$junk<-grepl("[[:alpha:]]", data2024$id)
data2024<-subset(data2024,data2024$junk==FALSE)
data2024<-data2024[1:ncol(data2024)-1]
data2025$junk<-grepl("[[:alpha:]]", data2025$id)
data2025<-subset(data2025,data2025$junk==FALSE)
data2025<-data2025[1:ncol(data2025)-1]
#the class and type of each columns
sapply(data2024, class)
sapply(data2024, typeof)
for (perc in c("host_response_rate","host_acceptance_rate")){
data2024[[perc]]<-gsub("%","",as.character(data2024[[perc]]))
}
data2024$price <- gsub("[\\$,]", "", data2024$price)
data2024$price <- as.numeric(data2024$price)
for (perc in c("host_response_rate","host_acceptance_rate")){
data2025[[perc]]<-gsub("%","",as.character(data2025[[perc]]))
}
#remove dollar signs from price variables
data2025$price <- gsub("[\\$,]", "", data2025$price)
data2025$price <- as.numeric(data2025$price)
#format binary variables
for (binary in c("host_is_superhost","host_has_profile_pic","host_identity_verified",
"instant_bookable")){
data2024[[binary]][data2024[[binary]]=="f"] <- 0
data2024[[binary]][data2024[[binary]]=="t"] <- 1
}
for (binary in c("host_is_superhost","host_has_profile_pic","host_identity_verified",
"instant_bookable")){
data2025[[binary]][data2025[[binary]]=="f"] <- 0
data2025[[binary]][data2025[[binary]]=="t"] <- 1
}
data2024$amenities <- gsub("[\\{\\}\"]", "", data2024$amenities)
data2024$amenities <- tolower(data2024$amenities)
data2024$amenities <- trimws(data2024$amenities)
data2024$amenities <- strsplit(data2024$amenities, ",")
data2024$amenities <- lapply(data2024$amenities, trimws)
amenity_counts <- sort(table(unlist(data2024$amenities)), decreasing = TRUE)
top_n <- 20
top_amenities <- names(amenity_counts)[1:top_n]
top_dummies <- as.data.frame(do.call(rbind, lapply(data2024$amenities, function(x) {
as.integer(top_amenities %in% x)
})))
colnames(top_dummies) <- make.names(top_amenities)
data2024 <- cbind(data2024, top_dummies)
data2025$amenities <- gsub("[\\{\\}\"]", "", data2025$amenities)
data2025$amenities <- tolower(data2025$amenities)
data2025$amenities <- trimws(data2025$amenities)
data2025$amenities <- strsplit(data2025$amenities, ",")
data2025$amenities <- lapply(data2025$amenities, trimws)
amenity_counts <- sort(table(unlist(data2025$amenities)), decreasing = TRUE)
top_n <- 20
top_amenities <- names(amenity_counts)[1:top_n]
top_dummies <- as.data.frame(do.call(rbind, lapply(data2025$amenities, function(x) {
as.integer(top_amenities %in% x)
})))
colnames(top_dummies) <- make.names(top_amenities)
data2025 <- cbind(data2025, top_dummies)
data2024$amenities <- NULL
data2025$amenities <- NULL
top_amenities
